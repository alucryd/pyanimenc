#!/usr/bin/env python3

import argparse
import yaml
import os
from gi.repository import Gtk
from pyanimenc import Chapters

parser = argparse.ArgumentParser(description="Create Matroska chapters")
parser.add_argument('yaml', nargs='*', help="YAML chapter data files")
args = parser.parse_args()

class Entries():
    def __init__(self):
        self.chapter_box = Gtk.Box(orientation=1, spacing=12)
        box.pack_start(self.chapter_box, False, False, 0)
        for i in range(len(chapters)):
            self.entry(chapters[i], i)
        window.show_all()

    def entry(self, chapter, index):
        entry_box = Gtk.Box(orientation=1, spacing=6)
        box1 = Gtk.Box(spacing=6)
        box2 = Gtk.Box(spacing=6)
        entry_box.pack_start(box1, False, False, 0)
        entry_box.pack_start(box2, False, False, 0)
        self.chapter_box.pack_start(entry_box, False, False, 0)

        policy = Gtk.SpinButtonUpdatePolicy.IF_VALID
        adj1 = Gtk.Adjustment(0, 0, 1000000, 1, 10, 0)
        adj2 = Gtk.Adjustment(0, 0, 1000000, 1, 10, 0)

        label1 = Gtk.Label("Title:")
        label2 = Gtk.Label("Start:")
        title = Gtk.Entry()
        title.set_text(chapter[0])
        title.connect('changed', handler.on_title_changed, index)
        start = Gtk.SpinButton()
        start.set_numeric(True)
        start.set_update_policy(policy)
        start.set_adjustment(adj1)
        start.set_value(chapter[1])
        start.connect('value-changed', handler.on_start_changed, index)

        box1.pack_start(label1, False, False, 0)
        box1.pack_start(title, False, False, 0)
        box2.pack_start(label2, False, False, 0)
        box2.pack_start(start, False, False, 0)

        if ordered:
            label3 = Gtk.Label("End:")
            label4 = Gtk.Label("UID:")
            end = Gtk.SpinButton()
            end.set_numeric(True)
            end.set_update_policy(policy)
            end.set_adjustment(adj2)
            # End is mandatory with OC
            end.set_value(chapter[2])
            end.connect('value-changed', handler.on_end_changed, index)
            # UID however is not
            uid = Gtk.Entry()
            uid.set_max_length(32)
            uid.set_width_chars(32)
            if len(chapter) == 4:
                uid.set_text(chapter[3])
            else:
                uid.set_text('')
            uid.connect('changed', handler.on_uid_changed, index)

            box2.pack_start(label3, False, False, 0)
            box2.pack_start(end, False, False, 0)
            box2.pack_start(label4, False, False, 0)
            box2.pack_start(uid, False, False, 0)

        if len(chapters) > 1:
            delete = Gtk.Button()
            del_image = Gtk.Image.new_from_icon_name('window-close-symbolic',
                                                     Gtk.IconSize.MENU)
            delete.set_image(del_image)
            delete.connect('clicked', handler.on_delete_clicked, index)
            box1.pack_end(delete, False, False, 0)
        if index < len(chapters) - 1:
            move_down = Gtk.Button()
            mdown_image = Gtk.Image.new_from_icon_name('go-down-symbolic',
                                                       Gtk.IconSize.MENU)
            move_down.set_image(mdown_image)
            move_down.connect('clicked', handler.on_move_clicked, 'down',
                              index)
            box1.pack_end(move_down, False, False, 0)
        if index > 0:
            move_up = Gtk.Button()
            mup_image = Gtk.Image.new_from_icon_name('go-up-symbolic',
                                                     Gtk.IconSize.MENU)
            move_up.set_image(mup_image)
            move_up.connect('clicked', handler.on_move_clicked, 'up', index)
            box1.pack_end(move_up, False, False, 0)

    def update(self):
        if ordered:
            for chapter in chapters:
                if len(chapter) == 2:
                    chapter.append(0)
                if len(chapter) == 3:
                    chapter.append('')
        print(chapters)
        box.remove(self.chapter_box)
        self.__init__()

class Handler:
    def on_settings_clicked(self, button):
        settings_dialog.run()

    def on_ordered_toggled(self, radio):
        global ordered
        if radio.get_active():
            ordered = True
            entries.update()
        else:
            ordered = False
            entries.update()

    def on_lang_changed(self, entry):
        global lang
        lang = entry.get_text()

    def on_fpsnum_changed(self, button):
        global fpsnum
        fpsnum = int(button.get_value())

    def on_fpsden_changed(self, button):
        global fpsden
        fpsden = int(button.get_value())

    def on_settings_ok_clicked(self, button):
        settings_dialog.hide()

    def on_new_chapter_clicked(self, button):
        chapters.append(["New Chapter", 0, 0, ''])
        entries.update()

    def on_open_clicked(self, button):
        open_dialog.run()

    def on_open_ok_clicked(self, button):
        global cwd
        global output
        global lang
        global fpsnum
        global fpsden
        global chapters

        input = open_dialog.get_filename()
        cwd, output = os.path.split(input)
        output = os.path.splitext(output)[0] + '.xml'
        data = parse(input)
        ordered = data.get('ordered', True)
        lang = data.get('lang', 'eng')
        fpsnum = data.get('fpsnum', 24000)
        fpsden = data.get('fpsden', 1001)
        chapters = data['chapters']
        ordered_check.set_active(ordered)
        print(chapters)
        entries.update()

        open_dialog.hide()

    def on_open_cancel_clicked(self, button):
        open_dialog.hide()

    def on_save_clicked(self, button):
        save_dialog.set_current_folder(cwd)
        save_dialog.set_current_name(output)
        save_dialog.run()

    def on_save_ok_clicked(self, button):
        xml_file = save_dialog.get_filename()
        mkchap(chapters, xml_file, lang, fpsnum, fpsden, ordered)

        save_dialog.hide()

    def on_save_cancel_clicked(self, button):
        save_dialog.hide()

    def on_title_changed(self, entry, index):
        chapters[index][0] = entry.get_text()

    def on_start_changed(self, button, index):
        chapters[index][1] = int(button.get_value())

    def on_end_changed(self, button, index):
        chapters[index][2] = int(button.get_value())

    def on_uid_changed(self, entry, index):
        chapters[index][3] = entry.get_text()

    def on_delete_clicked(self, button, index):
        chapters.pop(index)
        entries.update()

    def on_move_clicked(self, button, direction, index):
        if direction == 'up':
            chapters[index - 1:index + 1] = [chapters[index],
                                             chapters[index - 1]]
        elif direction == 'down':
            chapters[index :index + 2] = [chapters[index + 1],
                                          chapters[index]]
        entries.update()

    def on_window_delete_event(self, *args):
        Gtk.main_quit(*args)

def parse(input):
    with open(input, 'r') as f:
        data = f.read()
    data = yaml.load(data)
    return data

def mkchap(chapters, output, lang='eng', fpsnum=24000, fpsden=1001, ordered=True):
    c = Chapters(lang, fpsnum, fpsden, ordered).chapter(chapters)
    with open(output, 'wb') as f:
        f.write(c)

if args.yaml:
    for yaml_file in args.yaml:
        xml_file = os.path.splitext(yaml_file)[0] + '.xml'
        data = parse(input)
        ordered = data.get('ordered', True)
        lang = data.get('lang', 'eng')
        fpsnum = data.get('fpsnum', 24000)
        fpsden = data.get('fpsden', 1001)
        chapters = data['chapters']
        mkchap(chapters, xml_file, lang, fpsnum, fpsden, ordered)
else:
    cwd = ''
    output = 'chapter.xml'
    ordered = True
    lang = 'eng'
    fpsnum = 24000
    fpsden = 1001
    chapters = [["New Chapter", 0, 0, '']]

    builder = Gtk.Builder()
    handler = Handler()
    builder.add_from_file('mkchap.glade')
    builder.connect_signals(handler)

    window = builder.get_object('window')
    box = builder.get_object('box')
    open_dialog = builder.get_object('open-dialog')
    save_dialog = builder.get_object('save-dialog')
    settings_dialog = builder.get_object('settings-dialog')
    ordered_check = builder.get_object('ordered-check')

    entries = Entries()

    Gtk.main()

# vim: ts=4 sw=4 et:
