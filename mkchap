#!/usr/bin/env python3

import argparse
import yaml
import os
from gi.repository import Gtk
from pyanimenc import Chapters

parser = argparse.ArgumentParser(description="Create Matroska chapters")
parser.add_argument('yaml', nargs='*', help="YAML chapter data files")
args = parser.parse_args()

def mkchap(data, output):
    c = Chapters().chapter(data)
    with open(output, 'wb') as f:
        f.write(c)

def parse_yaml(input):
    with open(input, 'r') as f:
        data = f.read()
    data = yaml.load(data)
    return data

class ChapterEditor(Gtk.Window):
    def __init__(self):
        self.cwd = ''
        self.output = 'chapter.xml'
        self.oc = True
        self.data = [["New Chapter", 0, 0, '']]

        Gtk.Window.__init__(self, title="Chapter Editor")
        self.set_border_width(12)

        hb = Gtk.HeaderBar(spacing=6)
        hb.props.show_close_button = True
        hb.props.title = "Chapter Editor"
        self.set_titlebar(hb)

        open_button = Gtk.Button()
        open_image = Gtk.Image.new_from_icon_name('document-open-symbolic',
                                                  Gtk.IconSize.MENU)
        open_button.set_image(open_image)
        open_button.connect('clicked', self.on_open_clicked)
        hb.pack_start(open_button)

        import_button = Gtk.Button()
        import_image = Gtk.Image.new_from_icon_name('document-import-symbolic',
                                                    Gtk.IconSize.MENU)
        import_button.set_image(import_image)
        hb.pack_start(import_button)

        save_button = Gtk.Button()
        save_image = Gtk.Image.new_from_icon_name('document-save-symbolic',
                                                  Gtk.IconSize.MENU)
        save_button.set_image(save_image)
        save_button.connect('clicked', self.on_save_clicked)
        hb.pack_start(save_button)

        self.box = Gtk.Box(orientation=1, spacing=12)
        self.add(self.box)

        oc_box = Gtk.Box(spacing=6)
        self.box.pack_start(oc_box, False, False, 0)

        oc_label = Gtk.Label(label="Ordered Chapters")
        oc_box.pack_start(oc_label, False, False, 0)
        self.oc_checkbox = Gtk.CheckButton()
        self.oc_checkbox.set_active(self.oc)
        self.oc_checkbox.connect('toggled', self.on_oc_checked)
        oc_box.pack_start(self.oc_checkbox, False, False, 0)

        self.chapter_entries()

        new = Gtk.Button('New Chapter')
        new.connect('clicked', self.on_new_clicked)
        self.box.pack_end(new, False, False, 0)

    def chapter_entries(self):
        self.chapter_box = Gtk.Box(orientation=1, spacing=12)
        self.box.pack_start(self.chapter_box, False, False, 0)
        for i in range(len(self.data)):
            self.chapter_entry(self.data[i], i)

    def chapter_entry(self, chapter, index):
        box = Gtk.Box(orientation=1, spacing=6)
        box1 = Gtk.Box(spacing=6)
        box2 = Gtk.Box(spacing=6)
        self.chapter_box.pack_start(box, False, False, 0)
        box.pack_start(box1, False, False, 0)
        box.pack_start(box2, False, False, 0)

        policy = Gtk.SpinButtonUpdatePolicy.IF_VALID
        # Using the same adjustments will mirror values
        adj1 = Gtk.Adjustment(0, 0, 1000000, 1, 10, 0)
        adj2 = Gtk.Adjustment(0, 0, 1000000, 1, 10, 0)

        label1 = Gtk.Label("Title:")
        label2 = Gtk.Label("Start:")
        title = Gtk.Entry()
        title.set_text(chapter[0])
        start = Gtk.SpinButton()
        start.set_numeric(True)
        start.set_update_policy(policy)
        start.set_adjustment(adj1)
        start.set_value(chapter[1])

        box1.pack_start(label1, False, False, 0)
        box1.pack_start(title, False, False, 0)
        box2.pack_start(label2, False, False, 0)
        box2.pack_start(start, False, False, 0)

        if self.oc:
            label3 = Gtk.Label("End:")
            label4 = Gtk.Label("UID:")
            end = Gtk.SpinButton()
            end.set_numeric(True)
            end.set_update_policy(policy)
            end.set_adjustment(adj2)
            # End is mandatory with OC
            end.set_value(chapter[2])
            # UID however is not
            uid = Gtk.Entry()
            uid.set_max_length(32)
            uid.set_width_chars(32)
            if len(chapter) == 4:
                uid.set_text(chapter[3])
            else:
                uid.set_text('')

            box2.pack_start(label3, False, False, 0)
            box2.pack_start(end, False, False, 0)
            box2.pack_start(label4, False, False, 0)
            box2.pack_start(uid, False, False, 0)

        if len(self.data) > 1:
            delete = Gtk.Button()
            del_image = Gtk.Image.new_from_icon_name('window-close-symbolic',
                                                     Gtk.IconSize.MENU)
            delete.set_image(del_image)
            delete.connect('clicked', self.on_delete_clicked, index)
            box1.pack_end(delete, False, False, 0)
        if index < len(self.data) - 1:
            move_down = Gtk.Button()
            mdown_image = Gtk.Image.new_from_icon_name('go-down-symbolic',
                                                       Gtk.IconSize.MENU)
            move_down.set_image(mdown_image)
            move_down.connect('clicked', self.on_move_clicked, 'down', index)
            box1.pack_end(move_down, False, False, 0)
        if index > 0:
            move_up = Gtk.Button()
            mup_image = Gtk.Image.new_from_icon_name('go-up-symbolic',
                                                     Gtk.IconSize.MENU)
            move_up.set_image(mup_image)
            move_up.connect('clicked', self.on_move_clicked, 'up', index)
            box1.pack_end(move_up, False, False, 0)

    def update_entries(self):
        self.box.remove(self.chapter_box)
        self.chapter_entries()
        win.show_all()

    def on_delete_clicked(self, button, index):
        self.data.pop(index)
        self.update_entries()

    def on_new_clicked(self, button):
        self.data.append(["New Chapter", 0, 0, ''])
        self.update_entries()

    def on_move_clicked(self, button, direction, index):
        if direction == 'up':
            self.data[index - 1:index + 1] = [self.data[index], self.data[index - 1]]
        elif direction == 'down':
            self.data[index :index + 2] = [self.data[index + 1], self.data[index]]
        self.update_entries()

    def on_open_clicked(self, button):
        dialog = Gtk.FileChooserDialog("Please choose a file", self,
                                       Gtk.FileChooserAction.OPEN,
                                       (Gtk.STOCK_CANCEL,
                                        Gtk.ResponseType.CANCEL,
                                        Gtk.STOCK_OPEN, Gtk.ResponseType.OK))

        self.add_filter(dialog, 'yaml')

        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            input = dialog.get_filename()
            self.cwd, self.output = os.path.split(input)
            self.output = os.path.splitext(self.output)[0] + '.xml'
            self.data = parse_yaml(input)
            self.oc = False
            for chapter in self.data:
                if len(chapter) == 4 and chapter[3]:
                    self.oc = True
            self.oc_checkbox.set_active(self.oc)
            self.update_entries()

        dialog.destroy()

    def on_save_clicked(self, button):
        dialog = Gtk.FileChooserDialog("Please choose a file", self,
                                       Gtk.FileChooserAction.SAVE,
                                       (Gtk.STOCK_CANCEL,
                                        Gtk.ResponseType.CANCEL,
                                        Gtk.STOCK_OPEN, Gtk.ResponseType.OK))
        dialog.set_current_folder(self.cwd)
        dialog.set_current_name(self.output)

        self.add_filter(dialog, 'xml')

        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            xml_file = dialog.get_filename()
            mkchap(self.data, xml_file)

        dialog.destroy()

    def add_filter(self, dialog, ext):
         filt = Gtk.FileFilter()
         filt.set_name(ext.upper() + " files")
         filt.add_pattern('*.' + ext)
         dialog.add_filter(filt)

    def on_oc_checked(self, radio):
        if radio.get_active():
            self.oc = True
            self.update_entries()
        else:
            self.oc = False
            self.update_entries()

if args.yaml:
    for yaml_file in args.yaml:
        output = os.path.splitext(yaml_file)[0] + '.xml'
        data = parse_yaml(input)
        mkchap(data, output)
else:
    win = ChapterEditor()
    win.connect('delete-event', Gtk.main_quit)
    win.show_all()
    Gtk.main()

# vim: ts=4 sw=4 et:
