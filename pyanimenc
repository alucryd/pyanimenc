#!/usr/bin/env python3

import os
import re
import subprocess
import yaml
from gi.repository import Gtk,GdkPixbuf
from pyanimenc import Encode

class Handler:
    def on_vsource_file_set(self, button):
        global vsource
        vsource = button.get_filename()
        video_pbar.set_fraction(0)

    def on_asource_file_set(self, button):
        global asource
        asource = button.get_filename()
        audio_pbar.set_fraction(0)

    def on_vstart_clicked(self, button):
        if venc == 'x264' or venc == 'x264-10bit':
            cmd = Encode(vsource).info()
            with subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,
                                  universal_newlines=True) as proc:
                while True:
                    line = proc.stdout.readline()
                    if line:
                        # Get the frame total
                        if 'Frames' in line:
                            dur = line.split(' ')[1]
                            dur = int(dur)
                    else:
                        break

            cmd = Encode(vsource).x264(vquality, vcontainer, vdepth, vpreset,
                                       vtune)
            with subprocess.Popen(cmd, shell=True, stderr=subprocess.PIPE,
                                  universal_newlines=True) as proc:
                while True:
                    line = proc.stderr.readline()
                    log_buffer.insert(log_buffer.get_end_iter(), line)
                    if line:
                        # Get the current frame
                        if re.match('^[0-9]+ ', line):
                            pos = line.split(' ')[0]
                            pos = int(pos)
                            progress = round(pos / dur, 2)
                            video_pbar.set_fraction(progress)
                        while Gtk.events_pending():
                             Gtk.main_iteration()
                    else:
                        video_pbar.set_fraction(1)
                        break

    def on_vstop_clicked(self, button):
        subprocess.call('killall ' + venc, shell=True)

    def on_astart_clicked(self, button):
        if aenc == 'fdkaac':
            cmd = Encode(asource).fdkaac(aquality, acontainer)
            with subprocess.Popen(cmd, shell=True, stderr=subprocess.PIPE,
                                  universal_newlines=True) as proc:
                while True:
                    line = proc.stderr.readline()
                    log_buffer.insert(log_buffer.get_end_iter(), line)
                    if line:
                        # Get the clip duration
                        if 'Duration' in line:
                            dur = re.findall('[0-9]{2}:[0-9]{2}:[0-9]{2}',
                                             line)[0]
                            h, m, s = dur.split(':')
                            dur = int(h) * 3600 + int(m) * 60 + int(s)
                        # Get the current timestamp
                        if re.match('[0-9]{2}:[0-9]{2}\.[0-9]{3}', line):
                            pos = re.findall('^[0-9]{2}:[0-9]{2}', line)[0]
                            m, s = pos.split(':')
                            pos = int(m) * 60 + int(s)
                            progress = round(pos / dur, 2)
                            audio_pbar.set_fraction(progress)
                            while Gtk.events_pending():
                                Gtk.main_iteration()
                    else:
                        audio_pbar.set_fraction(1)
                        break

    def on_astop_clicked(self, button):
        subprocess.call('killall ' + aenc, shell=True)

    def on_venc_changed(self, combo):
        global venc
        global vdepth
        global vquality
        global vcontainer
        global vpreset
        global vtune
        venc = combo.get_active_text()
        if venc in ['x264', 'x264-10bit']:
            vquality = x264_quality_spin.get_value()
            vcontainer = x264_container_cbtext.get_active_text()
            vpreset = x264_preset_cbtext.get_active_text()
            vtune = x264_tune_cbtext.get_active_text()
        if venc == 'x264':
            vdepth = 8
        elif venc == 'x264-10bit':
            vdepth = 10

    def on_aenc_changed(self, combo):
        global aenc
        global aquality
        global acontainer
        aenc = combo.get_active_text()
        if aenc == 'fdkaac':
            aquality = fdkaac_quality_spin.get_value()
            acontainer = fdkaac_container_cbtext.get_active_text()

    def on_vsettings_clicked(self, button):
        if venc in ['x264', 'x264-10bit']:
            x264_dialog.run()

    def on_asettings_clicked(self, button):
        if aenc == 'fdkaac':
            fdkaac_dialog.run()

    def on_x264_quality_changed(self, spin):
        global vquality
        vquality = spin.get_value()

    def on_x264_container_changed(self, combo):
        global vcontainer
        vcontainer = combo.get_active_text()

    def on_x264_preset_changed(self, combo):
        global vpreset
        vpreset = combo.get_active_text()

    def on_x264_tune_changed(self, combo):
        global vtune
        vtune = combo.get_active_text()

    def on_x264_ok_clicked(self, button):
        x264_dialog.hide()

    def on_fdkaac_quality_changed(self, spin):
        global aquality
        aquality = spin.get_value()

    def on_fdkaac_container_changed(self, combo):
        global acontainer
        acontainer = combo.get_active_text()

    def on_fdkaac_ok_clicked(self, button):
        fdkaac_dialog.hide()

    def on_log_clear_clicked(self, button):
        log_buffer.set_text('')

    def on_vs_creator_clicked(self, button):
        self.source = ''
        self.crop = []
        self.deband = []
        self.resize = []
        vs_creator_window.show()

    def update_script(self):
        # Tried to set up marks to only replace relevant parts, but left or
        # right gravity can't cover all user input cases, marks will always end
        # up in weird places, only choice is flush the buffer every time.
        source_text = ''
        crop_text = ''
        deband_text = ''
        resize_text = ''
        vs_script_buffer.set_text("")
        vs_script_buffer.insert_at_cursor("import vapoursynth as vs\n")
        vs_script_buffer.insert_at_cursor("core = vs.get_core()\n")
        source_text = 'clip = core.ffms2.Source("{}")\n'.format(self.source)
        if self.crop:
            crop_text = 'clip = core.std.CropRel(clip, {}, {}, {}, {})\n'
            crop_text = crop_text.format(self.crop[0], self.crop[1],
                                         self.crop[2], self.crop[3])
        if self.deband:
            deband_text = 'clip = core.f3kdb.Deband(clip, preset="{}", '
            deband_text = deband_text + 'output_depth=16)\n'
            preset = self.deband[0]
            if self.deband[1] in ['luma', 'chroma']:
                preset = '/'.join([preset, self.deband[1]])
            if self.deband[2]:
                preset = '/'.join([preset, 'nograin'])
            deband_text = deband_text.format(preset)
        if self.resize:
            resize_text = 'clip = core.resize.{}(clip, {}, {})\n'
            resize_text = resize_text.format(self.resize[2].capitalize(),
                                             self.resize[0], self.resize[1])
        vs_script_buffer.insert_at_cursor(source_text + crop_text +
                                          deband_text + resize_text)
        vs_script_buffer.insert_at_cursor("clip.set_output()")

    def on_vs_source_file_set(self, button):
        self.source = button.get_filename()
        vs_crop_check.set_sensitive(True)
        vs_resize_check.set_sensitive(True)
        vs_deband_check.set_sensitive(True)
        self.update_script()

    def on_vs_crop_toggled(self, check):
        if check.get_active():
            vs_lcrop_spin.set_sensitive(True)
            vs_rcrop_spin.set_sensitive(True)
            vs_tcrop_spin.set_sensitive(True)
            vs_bcrop_spin.set_sensitive(True)
            self.crop = [vs_lcrop_spin.get_value_as_int(),
                         vs_rcrop_spin.get_value_as_int(),
                         vs_tcrop_spin.get_value_as_int(),
                         vs_bcrop_spin.get_value_as_int()]
        else:
            self.crop = []
            vs_lcrop_spin.set_sensitive(False)
            vs_rcrop_spin.set_sensitive(False)
            vs_tcrop_spin.set_sensitive(False)
            vs_bcrop_spin.set_sensitive(False)
        self.update_script()

    def on_vs_lcrop_changed(self, spin):
        self.crop[0] = spin.get_value_as_int()
        self.update_script()

    def on_vs_rcrop_changed(self, spin):
        self.crop[1] = spin.get_value_as_int()
        self.update_script()

    def on_vs_tcrop_changed(self, spin):
        self.crop[2] = spin.get_value_as_int()
        self.update_script()

    def on_vs_bcrop_changed(self, spin):
        self.crop[3] = spin.get_value_as_int()
        self.update_script()

    def on_vs_resize_toggled(self, check):
        if check.get_active():
            vs_wresize_spin.set_sensitive(True)
            vs_hresize_spin.set_sensitive(True)
            vs_resize_filter_cbtext.set_sensitive(True)
            self.resize = [vs_wresize_spin.get_value_as_int(),
                           vs_hresize_spin.get_value_as_int(),
                           vs_resize_filter_cbtext.get_active_text()]
        else:
            self.resize = []
            vs_wresize_spin.set_sensitive(False)
            vs_hresize_spin.set_sensitive(False)
            vs_resize_filter_cbtext.set_sensitive(False)
        self.update_script()

    def on_vs_wresize_changed(self, spin):
        self.resize[0] = spin.get_value_as_int()
        self.update_script()

    def on_vs_hresize_changed(self, spin):
        self.resize[1] = spin.get_value_as_int()
        self.update_script()

    def on_vs_resize_filter_changed(self, combo):
        self.resize[2] = combo.get_active_text()
        self.update_script()

    def on_vs_deband_toggled(self, check):
        if check.get_active():
            vs_deband_preset_cbtext.set_sensitive(True)
            vs_deband_channel_cbtext.set_sensitive(True)
            vs_deband_nograin_check.set_sensitive(True)
            self.deband = [vs_deband_preset_cbtext.get_active_text(),
                           vs_deband_channel_cbtext.get_active_text(),
                           vs_deband_nograin_check.get_active()]
        else:
            self.deband = []
            vs_deband_preset_cbtext.set_sensitive(False)
            vs_deband_channel_cbtext.set_sensitive(False)
            vs_deband_nograin_check.set_sensitive(False)
        self.update_script()

    def on_vs_deband_preset_changed(self, combo):
        self.deband[0] = combo.get_active_text()
        self.update_script()

    def on_vs_deband_channel_changed(self, combo):
        self.deband[1] = combo.get_active_text()
        self.update_script()

    def on_vs_deband_nograin_toggled(self, check):
        self.deband[2] = check.get_active()
        self.update_script()

    def on_vs_script_changed(self, buffer):
        vs_save_button.set_sensitive(True)
        vs_preview_button.set_sensitive(True)

    def update_preview(self, frame):
        vpy = vs_script_buffer.get_text(vs_script_buffer.get_start_iter(),
                                        vs_script_buffer.get_end_iter(),
                                        include_hidden_chars=True)
        vpy = compile(vpy, '<string>', 'exec')
        preview_ns = {}
        exec(vpy, preview_ns)
        vs = preview_ns['vs']
        core = preview_ns['core']
        clip = preview_ns['clip']
        clip = core.resize.Bicubic(clip, format=vs.RGB24)
        data = clip.get_frame(frame)
        width = data.width
        height = data.height
        stride = data.get_stride(0)
        pixbuf = GdkPixbuf.Pixbuf.new_from_data(data.get_read_ptr(0),
                                                GdkPixbuf.Colorspace.RGB,
                                                False, 8, width, height,
                                                stride, None, True)
        vs_preview_image.set_from_pixbuf(pixbuf)

    def on_vs_preview_clicked(self, button):
        self.update_preview(0)
        vs_preview_dialog.run()

    def on_vs_save_clicked(self, button):
        vs_save_fcdialog.run()

    def on_vs_save_ok_clicked(self, button):
        output = vs_save_fcdialog.get_filename()
        vpy = vs_script_buffer.get_text(vs_script_buffer.get_start_iter(),
                                        vs_script_buffer.get_end_iter(),
                                        include_hidden_chars=True)
        with open(output, 'w') as file:
            file.write(vpy)
        vs_save_fcdialog.hide()

    def on_vs_save_cancel_clicked(self, button):
        vs_save_fcdialog.hide()

    def on_vs_creator_window_delete_event(self, *args):
        vs_creator_window.hide()
        return True

    def on_window_delete_event(self, *args):
        Gtk.main_quit(*args)

# Initialize some variables
vsource = ''
vencs = [ 'x264', 'x264-10bit' ]
venc = ''
vdepth = 0
vquality = 0
vcontainer = ''
vpreset = ''
vtune = ''
asource = ''
aencs = [ 'fdkaac' ]
aenc = ''
aquality = 0
acontainer = ''

# Build the GUI
builder = Gtk.Builder()
handler = Handler()
builder.add_from_file('pyanimenc.glade')
builder.connect_signals(handler)

window = builder.get_object('window')
venc_cbtext = builder.get_object('venc-cbtext')
aenc_cbtext = builder.get_object('aenc-cbtext')
video_pbar = builder.get_object('video-pbar')
audio_pbar = builder.get_object('audio-pbar')
log_buffer = builder.get_object('log-buffer')

# VS Script Creator
vs_creator_window = builder.get_object('vs_creator-window')
vs_crop_check = builder.get_object('vs_crop-check')
vs_lcrop_spin = builder.get_object('vs_lcrop-spin')
vs_rcrop_spin = builder.get_object('vs_rcrop-spin')
vs_tcrop_spin = builder.get_object('vs_tcrop-spin')
vs_bcrop_spin = builder.get_object('vs_bcrop-spin')
vs_resize_check = builder.get_object('vs_resize-check')
vs_wresize_spin = builder.get_object('vs_wresize-spin')
vs_hresize_spin = builder.get_object('vs_hresize-spin')
vs_resize_filter_cbtext = builder.get_object('vs_resize_filter-cbtext')
vs_deband_check = builder.get_object('vs_deband-check')
vs_deband_preset_cbtext = builder.get_object('vs_deband_preset-cbtext')
vs_deband_channel_cbtext = builder.get_object('vs_deband_channel-cbtext')
vs_deband_nograin_check = builder.get_object('vs_deband_nograin-check')
vs_script_textview = builder.get_object('vs_script-textview')
vs_script_buffer = builder.get_object('vs_script-buffer')
vs_preview_button = builder.get_object('vs_preview-button')
vs_preview_dialog = builder.get_object('vs_preview-dialog')
vs_preview_image = builder.get_object('vs_preview-image')
vs_save_button = builder.get_object('vs_save-button')
vs_save_fcdialog = builder.get_object('vs_save-fcdialog')

# Populate the encoder combos
for enc in vencs:
    if os.path.isfile('/usr/bin/' + enc):
        venc_cbtext.append_text(enc)
    else:
        vencs.pop(enc)

for enc in aencs:
    if os.path.isfile('/usr/bin/' + enc):
        aenc_cbtext.append_text(enc)
    else:
        aencs.pop(enc)

# Set the default settings
if 'x264' in vencs or 'x264-10bit' in vencs:
    x264_dialog = builder.get_object('x264-dialog')
    x264_quality_spin = builder.get_object('x264_quality-spin')
    x264_quality_spin.set_value(15)
    x264_container_cbtext = builder.get_object('x264_container-cbtext')
    x264_container_cbtext.set_active(3)
    x264_preset_cbtext = builder.get_object('x264_preset-cbtext')
    x264_preset_cbtext.set_active(6)
    x264_tune_cbtext = builder.get_object('x264_tune-cbtext')
    x264_tune_cbtext.set_active(1)

if 'fdkaac' in aencs:
    fdkaac_dialog = builder.get_object('fdkaac-dialog')
    fdkaac_quality_spin = builder.get_object('fdkaac_quality-spin')
    fdkaac_quality_spin.set_value(4)
    fdkaac_container_cbtext = builder.get_object('fdkaac_container-cbtext')
    fdkaac_container_cbtext.set_active(0)

venc_cbtext.set_active(0)
aenc_cbtext.set_active(0)

window.show_all()

Gtk.main()

# vim: ts=4 sw=4 et:
